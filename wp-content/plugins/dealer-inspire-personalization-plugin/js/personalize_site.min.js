var Utils = {
    extend: function(newObj, targetObj) {
        targetObj = JSON.parse(JSON.stringify(targetObj));
        if (typeof newObj === "string") {
            return targetObj
        }
        var key, value;
        for (var key in newObj) {
            value = newObj[key];
            if (newObj.hasOwnProperty(key) && value !== undefined) {
                targetObj[key] = value
            }
        }
        return targetObj
    },
    queue: function() {
        var pending = [];

        function next() {
            var fn = pending.shift();
            if (fn) {
                fn(next)
            }
        }
        return function(fn) {
            pending.push(fn);
            if (pending.length == 1) next()
        }
    }(),
    setcss: function() {
        var cssPrefixes = ["Webkit", "O", "Moz", "ms"],
            cssProps = {};

        function camelCase(string) {
            return string.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function(match, letter) {
                return letter.toUpperCase()
            })
        }

        function getVendorProp(name) {
            var style = document.body.style;
            if (name in style) return name;
            var i = cssPrefixes.length,
                capName = name.charAt(0).toUpperCase() + name.slice(1),
                vendorName;
            while (i--) {
                vendorName = cssPrefixes[i] + capName;
                if (vendorName in style) return vendorName
            }
            return name
        }

        function getStyleProp(name) {
            name = camelCase(name);
            return cssProps[name] || (cssProps[name] = getVendorProp(name))
        }

        function applyCss(element, prop, value) {
            prop = getStyleProp(prop);
            element.style[prop] = value
        }
        return function(element, properties) {
            var args = arguments,
                prop, value;
            if (args.length == 2) {
                for (prop in properties) {
                    value = properties[prop];
                    if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value)
                }
            } else {
                applyCss(element, args[1], args[2])
            }
        }
    }(),
    clamp: function(n, min, max) {
        if (n < min) return min;
        if (n > max) return max;
        return n
    },
    toBarPerc: function(n) {
        return (-1 + n) * 100
    },
    hasClass: function(element, name) {
        var list = typeof element == "string" ? element : Utils.classList(element);
        return list.indexOf(" " + name + " ") >= 0
    },
    addClass: function(element, name) {
        var oldList = Utils.classList(element),
            newList = oldList + name;
        if (Utils.hasClass(oldList, name)) return;
        element.className = newList.substring(1)
    },
    removeClass: function(element, name) {
        var oldList = Utils.classList(element),
            newList;
        if (!Utils.hasClass(element, name)) return;
        newList = oldList.replace(" " + name + " ", " ");
        element.className = newList.substring(1, newList.length - 1)
    },
    showEl: function(element) {
        Utils.setcss(element, {
            display: "block"
        })
    },
    hideEl: function(element) {
        Utils.setcss(element, {
            display: "none"
        })
    },
    classList: function(element) {
        return (" " + (element.className || "") + " ").replace(/\s+/gi, " ")
    },
    removeElement: function(element) {
        element && element.parentNode && element.parentNode.removeChild(element)
    }
};
(function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define(factory)
    } else if (typeof exports === "object") {
        module.exports = factory()
    } else {
        root.Mprogress = factory()
    }
})(typeof window !== "undefined" ? window : this, function() {
    "use strict";
    var SETTINGS = {
        template: 1,
        parent: "body",
        start: false,
        minimum: .08,
        easing: "ease",
        positionUsing: "",
        speed: 200,
        trickle: true,
        trickleRate: .02,
        trickleSpeed: 800
    };
    var TPL_UNKOWN_ID = "99";
    var SPEED_ANIMATION_SHOW = 500;
    var SPEED_ANIMATION_HIDE = 1500;
    var SELECTOR_BAR = '[role="mpbar"]';
    var SELECTOR_BUFFER = '[role="bufferBar"]';
    var SELECTOR_DASHED = '[role="dashed"]';
    var renderTemplate = {
        determinate: '<div class="deter-bar" role="mpbar1">' + '<div class="peg"></div>' + "</div>" + '<div class="bar-bg"></div>',
        buffer: '<div class="deter-bar" role="mpbar2">' + '<div class="peg"></div>' + "</div>" + '<div class="buffer-bg" role="bufferBar"></div>' + '<div class="mp-ui-dashed" role="dashed"></div>',
        indeterminate: '<div class="indeter-bar" role="mpbar3">' + "</div>" + '<div class="bar-bg"></div>',
        query: '<div class="query-bar" role="mpbar4">' + '<div class="peg"></div>' + "</div>" + '<div class="bar-bg"></div>'
    };
    var cacheStore = {};
    var Mprogress = function(opt) {
        var options = Utils.extend(opt, SETTINGS);
        var idName = options.parent + options.template;
        var data = cacheStore[idName] || "";
        if (!data) {
            data = new MProgress(options);
            cacheStore[idName] = data
        }
        if (typeof opt === "string" && typeof data[opt] === "function") {
            data[opt]()
        } else if (options["start"]) {
            data.start()
        }
        return data
    };
    var MProgress = function(options) {
        this.options = options || {};
        this.status = null;
        this.bufferStatus = null;
        this._inst = MProgress_instances++
    };
    MProgress.prototype = {
        version: "0.1.0",
        constructor: MProgress,
        start: function() {
            if (!this.status && !this._isBufferStyle()) this.set(0);
            if (this._isIndeterminateStyle() || this._isQueryStyle()) {
                return this
            }
            var that = this;
            if (this._isBufferStyle() && !this.bufferStatus) {
                var progress = this._render();
                var dashed = progress.querySelector(SELECTOR_DASHED);
                var bar = progress.querySelector(this._getCurrSelector());
                Utils.hideEl(bar);
                Utils.hideEl(dashed);
                this.setBuffer(0).setBuffer(1);
                setTimeout(function() {
                    Utils.showEl(dashed);
                    Utils.showEl(bar);
                    that.set(0).setBuffer(0)
                }, SPEED_ANIMATION_SHOW)
            }

            function work() {
                setTimeout(function() {
                    if (!that.status) return;
                    that._trickle();
                    work()
                }, that.options.trickleSpeed)
            }
            if (this.options.trickle) work();
            return this
        },
        end: function(force) {
            if (!force && !this.status) return this;
            var that = this;
            var speed = this.options.speed;
            var progress = this._getRenderedId();
            if (this._isBufferStyle() && force) {
                return this.set(0).set(1)
            }
            if (this._isIndeterminateStyle()) {
                if (!this._isRendered() && force) {
                    this.set(0);
                    progress = this._getRenderedId();
                    speed = SPEED_ANIMATION_SHOW
                }
                Utils.setcss(progress, {
                    transition: "none",
                    opacity: 1
                });
                progress.offsetWidth;
                setTimeout(function() {
                    Utils.setcss(progress, {
                        transition: "all " + speed + "ms linear",
                        opacity: 0
                    });
                    setTimeout(function() {
                        that._remove()
                    }, speed)
                }, speed);
                return this
            }
            if (this._isQueryStyle()) {
                if (this._isRendered()) {
                    var bar = progress.querySelector(this._getCurrSelector());
                    Utils.addClass(bar, "end");
                    setTimeout(function() {
                        that._remove()
                    }, SPEED_ANIMATION_HIDE);
                    return this
                } else if (force) {
                    this.set(0);
                    progress = this._getRenderedId();
                    setTimeout(function() {
                        that._remove()
                    }, SPEED_ANIMATION_HIDE);
                    return this
                }
            }
            return this.inc(.3 + .5 * Math.random()).set(1)
        },
        set: function(n) {
            n = Utils.clamp(n, this.options.minimum, 1);
            this.status = n === 1 ? null : n;
            this._setProgress(this._getCurrSelector(), n);
            return this
        },
        setBuffer: function(n) {
            n = Utils.clamp(n, this.options.minimum, 1);
            this.bufferStatus = n === 1 ? null : n;
            this._setProgress(SELECTOR_BUFFER, n);
            return this
        },
        inc: function(amount) {
            var n = this.status;
            var bn = this.bufferStatus;
            if (!n) {
                return this.start()
            } else {
                n = this._getRandomNum(n, amount);
                if (this._isBufferStyle()) {
                    bn = this._getRandomNum(bn > n ? bn : n + .1, amount);
                    this.setBuffer(bn)
                }
                return this.set(n)
            }
        },
        _trickle: function() {
            return this.inc(Math.random() * this.options.trickleRate)
        },
        _remove: function() {
            var progress = this._getRenderedId(),
                MParent = document.querySelector(this.options.parent);
            if (MParent != document.body) {
                Utils.removeClass(MParent, "mprogress-custom-parent")
            }
            var idName = this.options.parent + this.options.template;
            if (cacheStore[idName]) {
                cacheStore[idName] = null
            }
            if (progress) {
                this.status = null;
                this.bufferStatus = null;
                Utils.removeElement(progress)
            }
        },
        _setProgress: function(barSelector, n) {
            var progress = this._render();
            var bar = progress.querySelector(barSelector);
            var speed = this.options.speed;
            var ease = this.options.easing;
            var that = this;
            progress.offsetWidth;
            if (this._isIndeterminateStyle() || this._isQueryStyle()) {
                return this
            }
            Utils.queue(function(next) {
                if (that.options.positionUsing === "") that.options.positionUsing = that._getPositioningCSS();
                if (n === 1) {
                    Utils.setcss(progress, {
                        transition: "none",
                        opacity: 1
                    });
                    progress.offsetWidth;
                    setTimeout(function() {
                        Utils.setcss(progress, {
                            transition: "all " + speed + "ms linear",
                            opacity: 0
                        });
                        setTimeout(function() {
                            that._remove();
                            next()
                        }, speed)
                    }, speed)
                } else {
                    setTimeout(next, speed)
                }
            })
        },
        _getCurrSelector: function() {
            var tplType = this._getCurrTplId();
            if (tplType !== TPL_UNKOWN_ID) {
                return '[role="mpbar' + tplType + '"]'
            } else {
                return SELECTOR_BAR
            }
        },
        _isStarted: function() {
            return typeof this.status === "number"
        },
        _getRandomNum: function(n, amount) {
            if (typeof amount !== "number") {
                amount = (1 - n) * Utils.clamp(Math.random() * n, .1, .95)
            }
            n = Utils.clamp(n + amount, 0, .994);
            return n
        },
        _isRendered: function() {
            return !!this._getRenderedId()
        },
        _getRenderedId: function(getId) {
            var tplType = this._getCurrTplId();
            var idName = "mprogress" + tplType + "_" + this._inst;
            if (!getId) {
                return document.getElementById(idName)
            } else {
                return idName
            }
        },
        _isBufferStyle: function() {
            return this._getCurrTplId() === 2
        },
        _isIndeterminateStyle: function() {
            return this._getCurrTplId() === 3
        },
        _isQueryStyle: function() {
            return this._getCurrTplId() === 4
        },
        _getCurrTplId: function() {
            var tplType = ~~this.options.template || 1;
            if (typeof tplType === "number") {
                return tplType
            } else {
                return TPL_UNKOWN_ID
            }
        },
        _getCurrTemplate: function() {
            var tplType = this.options.template || 1,
                tplNameArr = ["determinate", "buffer", "indeterminate", "query"],
                tplKey;
            if (typeof ~~tplType === "number") {
                tplKey = tplNameArr[tplType - 1];
                return renderTemplate[tplKey] || ""
            }
            if (typeof tplType === "string") {
                return template
            }
        },
        _getPositioningCSS: function() {
            var bodyStyle = document.body.style;
            var vendorPrefix = "WebkitTransform" in bodyStyle ? "Webkit" : "MozTransform" in bodyStyle ? "Moz" : "msTransform" in bodyStyle ? "ms" : "OTransform" in bodyStyle ? "O" : "";
            if (vendorPrefix + "Perspective" in bodyStyle) {
                return "translate3d"
            } else if (vendorPrefix + "Transform" in bodyStyle) {
                return "translate"
            } else {
                return "margin"
            }
        }
    };
    (function() {
        var initial = 0,
            current = 0;
        MProgress.prototype.promise = function($promise) {
            if (!$promise || $promise.state() == "resolved") {
                return this
            }
            var that = this;
            if (current == 0) {
                that.start()
            }
            initial++;
            current++;
            $promise.always(function() {
                current--;
                if (current == 0) {
                    initial = 0;
                    that.end()
                } else {
                    that.set((initial - current) / initial)
                }
            });
            return this
        }
    })();
    return Mprogress
});
var MProgress_instances = 0;
var DI_Personalization_Site = {
    init_time: null,
    count_visit: true,
    fade_time: 500,
    max_geolocation_wait: 4e3,
    hooks: {},
    init: function() {
        var self = this;
        var i = 0;
        var keynodes = [];
        var keys = [];
        this.init_time = new Date;
        jQuery(".di_personalize").each(function() {
            var node = jQuery(this);
            node.attr("id", "di_personalize_" + i);
            node.css("text-align", "center");
            var data_obj = self.attrs(node);
            data_obj.key = node.attr("key");
            keynodes.push(data_obj);
            keys.push(node.attr("key"));
            i++
        });
        this.find_matches(keys, keynodes)
    },
    queryString: function(variable) {
        try {
            q = location.search.substring(1);
            v = q.split("&");
            for (var i = 0; i < v.length; i++) {
                p = v[i].split("=");
                if (p[0] == variable) {
                    if (p[1].indexOf("%20") != -1) {
                        return decodeURIComponent(p[1])
                    } else {
                        return p[1]
                    }
                }
            }
        } catch (e) {
            if (typeof console !== "undefined") console.log(e)
        }
    },
    find_matches: function(keys, keynodes) {
        var self = this;
        if (typeof DIGeoLocation !== "undefined" && DIGeoLocation.stillLoading() && this.max_geolocation_wait > 0) {
            this.max_geolocation_wait -= 100;
            setTimeout(function() {
                self.find_matches(keys, keynodes)
            }, 100);
            return
        }
        var vehicle = null;
        if (typeof inventory_localization !== "undefined" && typeof inventory_localization.vehicle !== "undefined") {
            vehicle = inventory_localization.vehicle
        }
        var options = {
            type: "POST",
            url: di_personalize.ajax_url + "?action=personalize",
            data: {
                keys: keys,
                slug: di_personalize.slug,
                referer: document.referrer,
                utm_source: this.queryString("utm_source"),
                utm_medium: this.queryString("utm_medium"),
                utm_campaign: this.queryString("utm_campaign"),
                utm_content: this.queryString("utm_content")
            },
            dataType: "JSON"
        };
        var success_func = function(results) {
            self.fire_hook("pre_update");
            if (results && results.error == "" && results.items) {
                self.update_original_content(keynodes, results)
            } else {
                self.use_all_default_messages(keynodes)
            }
            self.fire_hook("post_update")
        };
        var fail_func = function() {
            self.fire_hook("pre_update");
            self.use_all_default_messages(keynodes);
            self.fire_hook("post_update")
        };
        var visited_func = function() {
            if (DI_Personalization_Site.count_visit) {
                var cookie_name = "di_visited";
                var visited_count = parseInt(DealerInspireCookie.ReadCookie(cookie_name), 10) || 0;
                visited_count += 1;
                DealerInspireCookie.CreateCookie(cookie_name, visited_count, 30);
                DI_Personalization_Site.count_visit = false
            }
        };
        var updatePersonalizerCookie = function(name, callback, expiration) {
            var value = callback(name);
            if (value) {
                DealerInspireCookie.CreateCookie(name, value, expiration)
            }
        };
        var updateTrackingArray = function(arr, val) {
            var currentIndex = arr.indexOf(val);
            if (currentIndex !== -1) {
                arr.splice(currentIndex, 1)
            }
            arr.unshift(val);
            if (arr.length > 10) {
                arr.pop()
            }
            return arr
        };
        var vehicle_history_func = function(name) {
            if (!vehicle) {
                return false
            }
            var vehicleHistory = {};
            var mapVehicleKeys = {
                makes: "make",
                models: "model",
                vins: "vin"
            };
            try {
                vehicleHistory = JSON.parse(DealerInspireCookie.ReadCookie(name) || "{}")
            } catch (err) {}
            for (var key in mapVehicleKeys) {
                var vehicleKey = mapVehicleKeys[key];
                if (!vehicle.hasOwnProperty(vehicleKey)) {
                    continue
                }
                if (!vehicleHistory.hasOwnProperty(key)) {
                    vehicleHistory[key] = []
                }
                if (key === "models") {
                    vehicle[vehicleKey] = vehicle[vehicleKey].replace(/\p{S}/gu, "")
                }
                vehicleHistory[key] = updateTrackingArray(vehicleHistory[key], vehicle[vehicleKey])
            }
            return vehicleHistory
        };
        var page_history_func = function(name) {
            if (!di_personalize.slug) {
                return false
            }
            var pageHistory = [];
            try {
                pageHistory = JSON.parse(DealerInspireCookie.ReadCookie(name) || "[]")
            } catch (err) {}
            return updateTrackingArray(pageHistory, di_personalize.slug)
        };
        var personalizerCookies = [{
            key: "di_vehicle_history",
            callback: vehicle_history_func,
            expiration: 7
        }, {
            key: "di_page_history",
            callback: page_history_func,
            expiration: 30
        }];
        var ajax_func = function() {
            personalizerCookies.forEach(function(cookie) {
                updatePersonalizerCookie(cookie.key, cookie.callback, cookie.expiration)
            });
            if (Array.isArray(keys) && keys.length !== 0) {
                jQuery.ajax(options).done(success_func).fail(fail_func).always(visited_func)
            } else {
                visited_func()
            }
        };
        if (document.readyState === "complete") {
            ajax_func()
        } else {
            jQuery(window).on("load", ajax_func)
        }
    },
    update_original_content: function(keynodes, results) {
        var self = this;
        var keyTracked = {};
        var tag = "";
        for (var i = 0; i < keynodes.length; i++) {
            var key = keynodes[i].key;
            if (key in results.items) {
                tag = results.items[keynodes[i].key].match(/DI_PZ key='[^']+' tag='([^']+)'/);
                if (tag[1]) tag = tag[1];
                self.prepare_content(keynodes[i], results.items[key])
            } else {
                tag = "Default Shown";
                self.use_default_message(keynodes[i])
            }
            keynodes[i].tag = tag;
            if (!(key in keyTracked)) {
                keyTracked[key] = true;
                this.track_shown_event(key, tag)
            }
        }
    },
    use_all_default_messages: function(keynodes) {
        var self = this;
        for (var i = 0; i < keynodes.length; i++) {
            self.use_default_message(keynodes[i])
        }
    },
    get_default_message: function(obj) {
        return jQuery("div.di_personalize_default", obj.node).html()
    },
    track_shown_event: function(key, tag) {
        if (typeof dataLayer != "undefined" && dataLayer && key) {
            var eventData = {
                event: "personalization",
                eventCategory: "Personalization",
                eventAction: "Shown",
                eventLabel: "Key: " + key + " Tag:" + tag + " Page:" + window.location.href,
                nonInteraction: true
            };
            dataLayer.push(eventData)
        }
    },
    use_default_message: function(obj) {
        var self = this;
        self.prepare_content(obj, this.get_default_message(obj))
    },
    prepare_content: function(node_object, new_content) {
        var self = this;
        var elapsed_time = new Date - this.init_time;
        var remaining_time = node_object.time - elapsed_time;
        if (remaining_time <= 0) {
            this.fadeout_placeholder(node_object, new_content)
        } else {
            setTimeout(function() {
                self.fadeout_placeholder(node_object, new_content)
            }, remaining_time)
        }
    },
    fadeout_placeholder: function(node_object, new_content) {
        var self = this;
        node_object.node = jQuery("#" + node_object.node.attr("id"));
        node_object.node.fadeOut(this.fade_time / 2, function() {
            self.fadein_content(node_object, new_content)
        })
    },
    fadein_content: function(node_object, new_content) {
        var self = this;
        var key = node_object.key;
        var tag = node_object.tag;
        node_object.node.css("text-align", "inherit");
        node_object.node.html(new_content);
        jQuery("a", node_object.node).click(function() {
            DI_Personalization_Site.track_click_event(jQuery(this), key, tag)
        });
        node_object.node.fadeIn(this.fade_time / 2);
        this.fire_hook("content_ready");
        window.dispatchEvent(new CustomEvent("PersonalizerReady"))
    },
    track_click_event: function(a_node, key, tag) {
        if (typeof dataLayer != "undefined" && dataLayer && key && tag) {
            var eventData = {
                event: "personalization-click",
                eventCategory: "Personalization",
                eventAction: "Click",
                eventLabel: "Key: " + key + " Tag:" + tag + " Dest:" + a_node.attr("href")
            };
            dataLayer.push(eventData)
        }
        var is_cta = a_node.data("is_cta"),
            label = "CTA",
            text = a_node.text().trim();
        if (typeof is_cta !== "undefined" && is_cta != null && is_cta == false) {
            label = "Button"
        }
        if (!text) {
            text = a_node.attr("href")
        }
        jQuery(document).trigger("di_ev", {
            name: "click",
            label: label,
            default_score: 0,
            custom_data: {
                button: {
                    text: text,
                    interface: "personalizer"
                }
            }
        })
    },
    attrs: function(node) {
        var obj = {};
        if (typeof jQuery(".di_personalize_customized", node).attr("data") != "undefined") {
            obj = JSON.parse(jQuery(".di_personalize_customized", node).attr("data"))
        }
        if (!("time" in obj)) obj.time = 2;
        if (!("size" in obj)) obj.size = 30;
        if (!("loading_type" in obj)) obj.loading_type = "line";
        obj.node = jQuery(node);
        return obj
    },
    register_hook: function(hook_key, fn) {
        if (!(hook_key in this.hooks)) {
            this.hooks[hook_key] = []
        }
        this.hooks[hook_key].push(fn)
    },
    fire_hook: function(hook_key) {
        if (hook_key in this.hooks) {
            for (var i = 0; i < this.hooks[hook_key].length; i++) {
                this.hooks[hook_key][i]();
                jQuery(document).trigger("di_personalize_" + hook_key)
            }
            this.hooks[hook_key] = []
        }
    }
};

function loadPersonalization() {
    if (document.readyState === "interactive" || document.readyState === "complete") {
        DI_Personalization_Site.init()
    }
}
document.addEventListener("DOMContentLoaded", loadPersonalization);
document.addEventListener("jellyfishLoaded", loadPersonalization);