var $ = void 0 !== $ ? $ : jQuery,
    DIDealerMap = {
        init: function(a, b) {
            b && (window.$ = b, window.jQuery = b);
            try {
                if ("undefined" == typeof google) throw "DIDealerMap: Google maps not found."
            } catch (a) {
                return !1
            }
            var c = {
                    activeInfowindow: null,
                    mapContainer: "#map",
                    mapSearchContainer: "#dealerSearchContainer",
                    mapDealerListContainer: ".dealerResultsList",
                    mapShowListButton: ".hideShowZipBox",
                    numClosestResultsToFind: -1,
                    numClosestToShowInList: 3,
                    zipCodeFieldSelector: "#zip",
                    zipCodeFormButton: ".search",
                    useMetric: !1,
                    useGeolocation: !0,
                    showCustomerMarker: !0,
                    recenterOnCustomerMarker: !1,
                    autoClickClosestMarker: !0,
                    fillViewport: !0,
                    containerHeight: 500,
                    useSvgMarker: !1,
                    svgMarkerColor: "#0072CE",
                    svgMarkerColorSelected: "#66BB6A",
                    svgMarkerLabel: !1,
                    pinImage: "/wp-content/themes/DealerInspireDealerTheme/images/map-marker.png",
                    pinImageSelected: "/wp-content/themes/DealerInspireDealerTheme/images/map-marker-selected.png",
                    headerOffset: !1,
                    mapOptions: {
                        zoom: 8,
                        center: {
                            lat: 41.7756595,
                            lng: -88.2027888
                        },
                        mapTypeId: google.maps.MapTypeId.ROADMAP,
                        scrollwheel: !1,
                        zoomControl: !0,
                        gestureHandling: "cooperative"
                    },
                    dealers: null,
                    infoWindowPartial: null,
                    strictZipSearch: !1,
                    strictBounds: !1,
                    enablePlacesFitBounds: !0,
                    strictLocationKeywords: "",
                    placesSearchDistance: 30,
                    placesSearchLimit: 3
                },
                d = this;
            this.config = $.extend(!0, c, a), this.zipCode = this.getURLParameter("zipcode") || null, this.currentMarker = null, this.customerMarker = null, this.showingSearch = !0, this.locations = [], this.geolocationData = null, this.calculatedCenter = null, this.mapBounds = new google.maps.LatLngBounds, this.geocoder = new google.maps.Geocoder, this.infoWindow = new google.maps.InfoWindow, this.distanceService = new google.maps.DistanceMatrixService, this.geoPromise = new $.Deferred, $.when(this.getDealerMapLocations()).then(function(a) {
                d.locations = a, d.getInfowindowPartial(), d.initDealerMap()
            }, function(a) {}), $(document).on("di_geolocation_finished", function(a, b) {
                "OK" === b.status ? d.geoPromise.resolve(b.response) : d.geoPromise.reject(b.status)
            })
        },
        initDealerMap: function() {
            var a = this,
                b = $(window).height(),
                c = $(window).width(),
                d = $(this.config.mapDealerListContainer),
                e = $(this.config.mapContainer);
            if (this.determineTierIIMapTopMargin(), $(d).find("li").length < 1 && $(d).hide(), c > 767 && !0 === this.config.fillViewport ? (b = parseInt(this.config.headerOffset) > 0 ? b - parseInt(this.config.headerOffset) : b, $(e).css("height", b)) : c > 767 && !1 === this.config.fillViewport && $(e).css("height", parseInt(this.config.containerHeight)), c < 1024 && !this.config.mapOptions.hasOwnProperty("draggable")) {
                var f = "cooperative" == this.config.mapOptions.gestureHandling;
                this.config.mapOptions.draggable = f
            }
            "complete" != document.readyState ? $(window).load(function() {
                a.setupMap()
            }) : a.setupMap()
        },
        determineTierIIMapTopMargin: function() {
            if ($(".page-template-page-tierii-locations " + this.config.mapContainer).length && $("#header").length && $(window).width() > 1024) {
                var a = $(".page-template-page-tierii-locations " + this.config.mapContainer),
                    b = $(this.config.mapContainer).offset(),
                    c = $("#header");
                "fixed" == c.css("position") && b.top <= 0 && (headerHeight = c.outerHeight(!0), a.css({
                    marginTop: headerHeight
                }))
            }
        },
        setupMap: function() {
            var a = this;
            window.dealerMap = window.dealerMap || new google.maps.Map(document.querySelector(this.config.mapContainer), this.config.mapOptions), this.addLocationsToMap(), $(this.config.mapContainer).length > 0 && (!this.config.useGeolocation || null !== this.geolocationData || this.zipCode && "null" !== this.zipCode ? this.isValidPostalCode(this.zipCode) ? this.getClosestForZip(this.zipCode) : $(".errorMessage").show() : this.geoPromise.done(function(b) {
                a.runGeocode(b)
            }).fail(function(a) {}), this.setupEvents())
        },
        runGeocode: function(a) {
            var b = a.latitude,
                c = a.longitude,
                d = this;
            $(this.config.mapSearchContainer).find("#dealerSearch").append('<span class="geo-loading"><i class="fa fa-cog fa-spin"></i> getting your location...</span>');
            var e = "";
            !1 !== this.config.mapSearchContainer && d.geocoder.geocode({
                location: {
                    lat: b,
                    lng: c
                }
            }, function(b, c) {
                if (c == google.maps.GeocoderStatus.OK) {
                    for (var f = 0; f < b[0].address_components.length; f++) {
                        var g = b[0].address_components[f];
                        g.types.indexOf("postal_code") > -1 && (e = g.long_name, $(d.config.zipCodeFieldSelector).val(e), d.getClosestForZip(e))
                    }
                    e && $(window).trigger("di_dealer_map_found_zipcode", [a, e])
                }
                $(".geo-loading").remove()
            })
        },
        setupEvents: function() {
            var a = this,
                b = null;
            $(this.config.mapShowListButton).show().on("click", function(b) {
                b.preventDefault(), $(this).hasClass("dealer-list-hidden") ? ($(a.config.mapSearchContainer).animate({
                    left: "0px"
                }, 400, "swing", function() {}), $(this).text("hide search").css("background-position", "10px -30px").removeClass("dealer-list-hidden")) : ($(a.config.mapSearchContainer).animate({
                    left: "-300px"
                }, 400, "swing", function() {}), $(this).text("show search").css("background-position", "10px 0px").addClass("dealer-list-hidden"))
            }), $(this.config.zipCodeFieldSelector).keypress(function(b) {
                13 == b.which && a.validateZipDoSearch()
            }), $(this.config.zipCodeFormButton).click(function(b) {
                a.validateZipDoSearch()
            }), $(this.config.mapDealerListContainer).on("click", ".jumpToLoc", function(b) {
                b.preventDefault();
                var c = $(this).data("locindex");
                a.realignMapToMarker(a.locations[c].marker)
            }), b = google.maps.event.addListener(window.dealerMap, "bounds_changed", function(c) {
                this.getZoom() > a.config.mapOptions.zoom && this.setZoom(a.config.mapOptions.zoom), google.maps.event.removeListener(b)
            }), google.maps.event.addDomListener(window, "resize", function(b) {
                a.fixMapLayout()
            }), google.maps.event.addDomListener(window.dealerMap, "idle", function() {
                a.calculatedCenter = window.dealerMap.getCenter()
            }), 1 === a.locations.length && a.realignMapToMarker(a.locations[0].marker), $(document).trigger("di_dealer_map_loaded", window.dealerMap), window.dealerMap.config = a.config
        },
        fixMapLayout: function(a) {
            var b = $(window).height(),
                c = ($(window).width(), this);
            this.config.headerOffset && (b -= parseInt(this.config.headerOffset)), window.requestAnimationFrame ? window.requestAnimationFrame(function() {
                !0 === c.config.fillViewport && $(c.config.mapContainer).css("height", b), null !== c.currentMarker ? c.realignMapToMarker(c.currentMarker) : window.dealerMap.panTo(c.calculatedCenter)
            }) : setTimeout(function() {
                !0 === c.config.fillViewport && $(c.config.mapContainer).css("height", b), null !== c.currentMarker ? c.realignMapToMarker(c.currentMarker) : window.dealerMap.panTo(c.calculatedCenter)
            }, 30)
        },
        validateZipDoSearch: function() {
            var a = $(this.config.zipCodeFieldSelector).val(),
                b = $(this.config.mapSearchContainer).find(".errorMessage"),
                c = this;
            this.isValidPostalCode(a, "US") ? (this.zipCode = a, $(b).hide(), c.getClosestForZip(this.zipCode)) : $(b).show()
        },
        realignMapToMarker: function(a) {
            this.currentMarker = a, !0 === this.config.autoClickClosestMarker ? new google.maps.event.trigger(a, "click") : window.dealerMap.panTo(a.getPosition())
        },
        setContentForLocation: function(a) {
            var b = '<div class="dealerMapInfo">';
            return b += "<h3>" + a.title + "</h3>", b += '<p class="address">' + a.location.address + "</p>", b += '<p class="phone">' + a.phone_label + ' <a href="tel:' + a.dealer_phone + '">' + a.dealer_phone + "</a></p>", b += ' <a class="button primary-button small ' + a.dealer_name_slug + '" target="_blank" href="' + a.dealer_website_url + '">' + a.dealer_website_url_button_text + "</a>", b += '<a class="button primary-button small" target="_blank" href="' + a.dealer_directions_url + '">' + a.dealer_directions_url_button_text + "</a>", b += "</div>"
        },
        addLocationsToMap: function(a) {
            var b = this;
            window.dealerMap._dealerMarkers = [], a = void 0 !== a && a ? a : this.locations;
            for (var c = 0, d = a.length; c < d; c++) {
                var e = this.createMapMarker(a[c]);
                window.dealerMap._dealerMarkers.push(e), google.maps.event.addListener(e, "click", function(a, c) {
                    return function() {
                        b.currentMarker = a, b.currentLocation = b.locations[c], b.infoWindow.setContent(b.locations[c].clickContent), b.infoWindow.open(window.dealerMap, a), b.activeInfowindow = b.locations[c].post_id, !0 === b.config.fillViewport ? window.dealerMap.panTo(a.getPosition()) : window.dealerMap.setCenter(a.getPosition()), jQuery(window).trigger("dealers_infoWindow_open")
                    }
                }(e, c)), a[c].marker = e
            }
            a.length > 1 && (window.dealerMap.fitBounds(this.mapBounds), $(document).trigger("di_dealermap_markers_set", [a]))
        },
        createMapMarker: function(a) {
            var b = this,
                c = {
                    post_id: a.post_id,
                    position: {
                        lat: parseFloat(a.location.lat),
                        lng: parseFloat(a.location.lng)
                    },
                    map: window.dealerMap,
                    icon: a.custom_pin_image || this.config.pinImage,
                    zIndex: 999 + a.pin_z_index || null
                };
            b.config.useSvgMarker && (c.icon = {
                path: MAP_PIN,
                fillColor: b.config.svgMarkerColor,
                fillOpacity: 1,
                strokeColor: "",
                strokeWeight: 0,
                scale: .6
            }, c.map_icon_label = (b.config.svgMarkerLabel, b.config.svgMarkerLabel));
            var d = new Marker(c),
                e = new google.maps.LatLng(d.position.lat(), d.position.lng());
            return this.mapBounds.extend(e), d
        },
        getClosestForZip: function(a) {
            var b = this.config.numClosestResultsToFind,
                c = [],
                d = this;
            try {
                this.geocoder.geocode({
                    address: a
                }, function(e, f) {
                    if (f != google.maps.GeocoderStatus.OK) throw "Geocode was not successful for the following reason: " + f;
                    var g = e[0].geometry.location; - 1 == b && (b = d.locations.length), c = d.findClosestN(g, b), d.calculateDistances(g, c), $(d.config.zipCodeFieldSelector).val(a), !0 === d.config.showCustomerMarker && d.showCustomerLocation(g.lat(), g.lng())
                })
            } catch (a) {}
        },
        findClosestN: function(a, b) {
            for (var c = [], d = 0, e = this.locations.length; d < e; d++) {
                var f = this.locations[d];
                f.marker.distance = google.maps.geometry.spherical.computeDistanceBetween(a, f.marker.getPosition()), c.push(f)
            }
            return c = c.sort(this.sortByDist), c.splice(0, b)
        },
        sortByDist: function(a, b) {
            return a.marker.distance - b.marker.distance
        },
        calculateDistances: function(a, b) {
            var c, d = {
                    origins: [a],
                    destinations: [],
                    travelMode: google.maps.TravelMode.DRIVING,
                    unitSystem: google.maps.UnitSystem.IMPERIAL,
                    avoidHighways: !1,
                    avoidTolls: !1
                },
                e = this;
            !0 === this.config.useMetric && (d.unitSystem = google.maps.UnitSystem.METRIC);
            for (var f = 0; f < b.length; f++) d.destinations.push(b[f].marker.getPosition());
            this.distanceService.getDistanceMatrix(d, function(a, d) {
                if (d != google.maps.DistanceMatrixStatus.OK);
                else {
                    var f = (a.originAddresses, a.destinationAddresses, a.rows[0].elements);
                    b.forEach(function(a, b) {
                        a.matrix = f[b]
                    }), b.sort(function(a, b) {
                        return a.matrix.distance.value - b.matrix.distance.value
                    }), !1 === e.config.recenterOnCustomerMarker && e.realignMapToMarker(b[0].marker), $(e.config.mapDealerListContainer).empty(), $.each(b, function(a, b) {
                        a < e.config.numClosestToShowInList && (c = e.dealerListHtml(b), $(e.config.mapDealerListContainer).show(), $(e.config.mapDealerListContainer).append(c))
                    }), $(document).trigger("di_dealermap_closest_found", b[0])
                }
            })
        },
        dealerListHtml: function(a) {
            var b = "<li class='singleDealerResult'>",
                c = a.dealer_directions_url;
            return b += "<div class='jumpToLoc' data-locindex='" + a.pinId + "'>", b += "<h4>", b += '<a href="' + a.dealer_website_url + '" target="_blank">', b += a.title, b += "</a>", b += "</h4>", b += '<p class="address">' + a.address + "</p>", b += '<p class="phone">Phone: <a href="tel:' + a.dealer_phone + '">' + a.dealer_phone + "</a></p>", b += '<p class="distanceAndTime">', b += '<span class="distance">' + a.matrix.distance.text + "</span>", b += "</p>", b += "</div>", b += "<ul class='dealerSearchActionsList'>", b += "<li>", b += "<div class='getDirections'><a target='_blank' class='get-directions directionsLink button primary-button' href='" + c + "'> Get Directions <a/></div>", b += "</li>", b += "<li>", b += "<a target='_blank' class='visit-website button primary-button " + a.dealer_name_slug + "' href='" + a.dealer_website_url + "'>Visit Website</a>", b += "</li>", b += "</ul>", b += "</li>"
        },
        showCustomerLocation: function(a, b) {
            null !== this.customerMarker && this.customerMarker.setMap(null), this.customerMarker = new google.maps.Marker({
                map: window.dealerMap,
                position: {
                    lat: a,
                    lng: b
                }
            }), !0 === this.config.recenterOnCustomerMarker && window.dealerMap.panTo(this.customerMarker.getPosition())
        }
    };
DIDealerMap.getDealerMapLocations = function() {
    var a = this,
        b = jQuery.Deferred(),
        c = [],
        d = a.config.dealers,
        e = {
            action: "get_dealers"
        };
    if (null !== d && d.length) {
        var f = d.split(",") || [];
        e.dealer_ids = [], jQuery.each(f, function(a, b) {
            e.dealer_ids.push(parseInt(this))
        })
    }
    return "undefined" == typeof lo_di_dealer_map || e.dealer_ids ? jQuery.ajax({
        type: "GET",
        url: lo_di_dealer_map.ajaxurl,
        dataType: "json",
        data: e,
        success: function(d) {
            c = a.parseDealerMapLocations(d), b.resolve(c)
        },
        error: function(a, c, d) {
            b.reject("DIDealerMap: " + d)
        }
    }) : (c = this.parseDealerMapLocations(lo_di_dealer_map.dealers), b.resolve(c)), b.promise()
}, DIDealerMap.getInfowindowPartial = function() {
    var a = this;
    return jQuery.ajax({
        type: "POST",
        url: lo_di_dealer_map.ajaxurl,
        dataType: "json",
        data: {
            action: "get_infowindow_content"
        },
        success: function(b) {
            a.infoWindowPartial = b.data, jQuery(document).trigger("di_dealermap_infowindowpartial_retrieved");
            for (var c = 0; c < a.locations.length; c++) a.locations[c].clickContent = a.infoWindowPartial, a.insertLocationDataInfowindow(a.locations[c]), null != a.infoWindow.map && a.currentLocation.post_id == a.locations[c].post_id && a.infoWindow.setContent(a.locations[c].clicContent)
        },
        error: function(a, b, c) {}
    })
}, DIDealerMap.insertLocationDataInfowindow = function(a) {
    a.clickContent = a.post_id ? a.clickContent.replace(/{{post_id}}/g, a.post_id) : a.clickContent.replace(/{{post_id}}/g, ""), a.clickContent = 0 != a.infowindow_image ? a.clickContent.replace(/{{image}}/g, a.infowindow_image) : a.clickContent.replace(/{{image}}/g, ""), a.clickContent = a.title ? a.clickContent.replace(/{{title}}/g, a.title) : a.clickContent.replace(/{{title}}/g, ""), a.clickContent = a.matrix ? a.clickContent.replace(/{{distance}}/g, a.matrix.distance.text) : a.clickContent.replace(/{{distance}}/g, ""), a.clickContent = a.phone_label ? a.clickContent.replace(/{{phoneLabel}}/g, a.phone_label) : a.clickContent.replace(/{{phoneLabel}}/g, ""), a.clickContent = a.dealer_phone ? a.clickContent.replace(/{{phoneNumberDigits}}/g, a.dealer_phone.replace(/\D/g, "")) : a.clickContent.replace(/{{phoneNumberDigits}}/g, ""), a.clickContent = a.dealer_phone ? a.clickContent.replace(/{{phoneNumber}}/g, a.dealer_phone) : a.clickContent.replace(/{{phoneNumber}}/g, ""), a.clickContent = a.dealer_name_slug ? a.clickContent.replace(/{{dealerNameSlug}}/g, a.dealer_name_slug) : a.clickContent.replace(/{{dealerNameSlug}}/g, ""), a.clickContent = a.dealer_website_url ? a.clickContent.replace(/{{permalink}}/g, a.dealer_website_url) : a.clickContent.replace(/{{permalink}}/g, ""), a.clickContent = a.dealer_website_url_button_text ? a.clickContent.replace(/{{permalinkButtonText}}/g, a.dealer_website_url_button_text) : a.clickContent.replace(/{{permalinkButtonText}}/g, ""), a.clickContent = a.dealer_directions_url ? a.clickContent.replace(/{{directionsUrl}}/g, a.dealer_directions_url) : a.clickContent.replace(/{{directionsUrl}}/g, ""), a.clickContent = a.dealer_directions_url_button_text ? a.clickContent.replace(/{{directionsButtonText}}/g, a.dealer_directions_url_button_text) : a.clickContent.replace(/{{directionsButtonText}}/g, ""), a.clickContent = a.description ? a.clickContent.replace(/{{dealerDescription}}/g, a.description) : a.clickContent.replace(/{{dealerDescription}}/g, ""), a.clickContent = a.dealer_newvehicle_url ? a.clickContent.replace(/{{dealerNewVehicleLink}}/g, a.dealer_newvehicle_url) : a.clickContent.replace(/{{dealerNewVehicleLink}}/g, ""), a.clickContent = a.sched_service_url ? a.clickContent.replace(/{{servicelink}}/g, a.sched_service_url) : a.clickContent.replace(/{{servicelink}}/g, "");
    var b = "";
    if ("" != a.address) b = a.address || "", a.address.match(/\|/) && (b = b.replace(/\|/g, "<br>") || "");
    else if (a.places_data) {
        var c = a.places_data.address.parts;
        b = c.street_number || "", b += " " + (c.route || ""), b += "<br>" + (c.locality || ""), b += ", " + (c.administrative_area_level_1 || ""), b += " " + (c.postal_code || "")
    } else b = a.location.address || "";
    a.clickContent = a.clickContent.replace("{{address}}", b)
}, DIDealerMap.parseDealerMapLocations = function(a) {
    for (var b = [], c = 0, d = a.length; c < d; c++) a[c].location && (a[c].pinId = c, a[c].hasOwnProperty("pin_z_index") && null !== a[c].pin_z_index && (a[c].pin_z_index = parseInt(a[c].pin_z_index)), b.push(a[c]));
    return b
}, DIDealerMap.getURLParameter = function(a) {
    return decodeURI((RegExp(a + "=(.+?)(&|$)").exec(window.location.search) || [, null])[1])
}, DIDealerMap.isValidPostalCode = function(a, b) {
    switch (b) {
        case "US":
            postalCodeRegex = /^([0-9]{5})(?:[-\s]*([0-9]{4}))?$/;
            break;
        case "CA":
            postalCodeRegex = /^([A-Z][0-9][A-Z])\s*([0-9][A-Z][0-9])$/;
            break;
        default:
            postalCodeRegex = /^(?:[A-Z0-9]+([- ]?[A-Z0-9]+)*)?$/
    }
    return postalCodeRegex.test(a)
};