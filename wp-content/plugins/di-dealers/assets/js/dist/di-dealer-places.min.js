jQuery(document).ready(function(a) {
    DIDealerGeoInstance.init()
});
var DIDealerPlaces = {
    $mapList: null,
    map: null,
    countLocations: null,
    currentPlaceMarker: null,
    currentMarker: null,
    circle: null,
    locations: null,
    markers: [],
    place: null,
    placesInput: null,
    placesService: null,
    searchBox: null,
    infoWindow: new google.maps.InfoWindow,
    closestLocations: [],
    dealerIconColor: "#0072CE",
    hasStrictZipSearch: !1,
    init: function(a) {
        var b = this;
        this.map = window.dealerMap, DIDealerMap.config.strictZipSearch || (this.placesInput = jQuery(a)[0], this.placesInit(this.placesInput), this.placesService = new google.maps.places.PlacesService(this.map), this.placesListeners()), b.$mapList = $(DIDealerMap.config.mapDealerListContainer), this.gmapListeners(), this.gmapDomListeners(), DIDealerMap.config.strictZipSearch ? (this.strictZipSearch(), this.hasStrictZipSearch = DIDealerMap.config.strictZipSearch) : this.directSearch(), this.geoLocationSearch(), this.finalGmapEvents(), DIDealerMap.config.svgMarkerColor && (this.dealerIconColor = DIDealerMap.config.svgMarkerColor), di_dealer_places_map.dealerAutopopulate && this.enableDealerAutopopulate()
    },
    delay: function(a, b) {
        var c = 0;
        return function() {
            var d = this,
                e = arguments;
            clearTimeout(c), c = setTimeout(function() {
                a.apply(d, e)
            }, b || 0)
        }
    },
    hasDirectDealerSearch: function() {
        var a = window.location.href;
        if (a.indexOf("location") > -1 && a.indexOf("did_id") > -1) {
            return DIDealerGeoInstance.paramsObject.did_id
        }
    },
    enableDealerAutopopulate: function() {
        $("#places-box").addClass("dynamic-dealer-results");
        var a = this,
            b = $(".dynamic-dealer-results"),
            c = $(".dynamic-dealer-results-output");
        $("body").on("click", ".did-dealer-result", function() {
            var a = $(this).attr("data-address"),
                b = $(this).attr("data-id"),
                c = $(this).attr("data-dealer");
            return window.location.href = window.location.href.replace(/\?.*/, "") + "?location=" + a + "&did_id=" + b + "&dname=" + c, !1
        }), b.on("input", this.delay(function() {
            var b = this.value;
            b.length > 3 ? $.ajax({
                url: di_dealer_places_map.ajaxurl,
                type: "POST",
                dataType: "json",
                beforeSend: function() {
                    a.activateLoader()
                },
                data: {
                    action: "dynamicDealerResults",
                    userInput: b
                },
                success: function(a) {
                    if (a.results) {
                        c.find("ul").length || c.append("<ul>");
                        var b = a.results;
                        b.length > 4 ? c.find("ul").addClass("overflow") : c.find("ul").removeClass("overflow"), $.each(b, function(a, b) {
                            c.find("ul").find("li." + b.post_name).length || c.find("ul").append($("<li>", {
                                class: "did-dealer-result " + b.post_name,
                                html: "<p>" + b.post_title + "</p><small>" + b.post_meta.address.address + "</small>",
                                "data-id": b.ID,
                                "data-address": b.post_meta.address_encoded,
                                "data-dealer": b.post_title
                            }))
                        })
                    } else c.text("")
                }
            }).always(function() {
                a.deactivateLoader()
            }) : b.trim() || c.text("")
        }, 100))
    },
    getCookie: function(a) {
        for (var b = a + "=", c = decodeURIComponent(document.cookie), d = c.split(";"), e = 0; e < d.length; e++) {
            for (var f = d[e];
                " " == f.charAt(0);) f = f.substring(1);
            if (0 == f.indexOf(b)) return f.substring(b.length, f.length)
        }
        return ""
    },
    activateLoader: function() {
        $(".places-loader").length && ($(".places-loader").css({
            top: "-15px",
            opacity: "0"
        }), $(".places-loader").show(), $(".places-loader").animate({
            top: "0",
            opacity: "1"
        }))
    },
    deactivateLoader: function() {
        $(".places-loader").length && ($(".places-loader").animate({
            top: "-15px",
            opacity: "0"
        }), $(".places-loader").fadeOut())
    },
    placesInit: function(a) {
        var b = this,
            c = {},
            d = !DIDealerMap.config.disableStrictBounds;
        if (void 0 !== DIDealerMap.config.strictBounds && DIDealerMap.config.strictBounds) {
            var e = void 0 !== DIDealerMap.config.strictBounds.ne ? DIDealerMap.config.strictBounds.ne : 0,
                f = void 0 !== DIDealerMap.config.strictBounds.sw ? DIDealerMap.config.strictBounds.sw : 0;
            if (e && f) {
                var g = new google.maps.LatLngBounds(f, e);
                if (g) {
                    c = {
                        bounds: g,
                        strictBounds: d,
                        componentRestrictions: {
                            country: void 0 !== DIDealerMap.config.strictBounds.country ? DIDealerMap.config.strictBounds.country : "us"
                        }
                    }
                }
            }
        }
        b.searchBox = new google.maps.places.Autocomplete(a, c)
    },
    directSearch: function() {
        var a = this;
        if (DIDealerGeoInstance.geoLocation) {
            a.getPlaces(DIDealerGeoInstance.geoLocation);
            var b = DIDealerGeoInstance.paramsObject,
                c = this.hasDirectDealerSearch() && void 0 !== b.dname ? b.dname : DIDealerGeoInstance._location;
            c = decodeURIComponent(c.replace(/\+/gm, " ")), $(a.placesInput).val(c)
        }
    },
    strictZipSearch: function() {
        var a = this;
        if (void 0 !== DIDealerGeoInstance && DIDealerGeoInstance.geoLocation && DIDealerGeoInstance.geoLocation.searchString) a.getPlacesByZip(DIDealerGeoInstance.geoLocation.searchString), $(a.placesInput).val(DIDealerGeoInstance.geoLocation.searchString);
        else if (void 0 !== DIDealerGeoInstance && !DIDealerGeoInstance.geoLocation && DIDealerGeoInstance._location) {
            var b = DIDealerGeoInstance._location;
            a.getPlacesByZip(b), $(a.placesInput).val(b)
        }
    },
    geoLocationSearch: function() {
        var a = this;
        jQuery(window).on("di_dealer_map_found_zipcode", function(b, c, d) {
            !DIDealerGeoInstance.geoLocation && d && (a.hasStrictZipSearch ? a.getPlacesByZip(d, c.latitude, c.longitude) : a.getPlaces("", c.latitude, c.longitude))
        })
    },
    finalGmapEvents: function() {
        var a = this;
        $(window).on("did_place_markers_added", function() {
            $(DIDealerMap.config.mapDealerListContainer).on("click", ".jumpToPlace h4 a", function(b) {
                b.preventDefault();
                var c = $(this).parents(".jumpToPlace").data("locindex");
                new google.maps.event.trigger(a.markers[c], "click"), a.currentMarker = a.markers[c]
            })
        })
    },
    gmapListeners: function() {
        var a = this;
        this.gmapListen("bounds_changed", function() {
            a.searchBox && a.searchBox.setBounds(a.map.getBounds())
        })
    },
    gmapListen: function(a, b) {
        this.map.addListener(a, b)
    },
    placesListeners: function() {
        var a = this;
        a.placesListen("places_changed", function() {
            jQuery(a.placesInput).val().length && a.getPlaces()
        }), a.placesListen("place_changed", function() {
            jQuery(a.placesInput).val().length && a.getPlaces()
        }), a.selectFirstOnEnter(jQuery(a.placesInput)[0])
    },
    getPlaces: function(a, b, c) {
        if (!a && b && c) var a = {
            geometry: {
                location: {
                    lat: b,
                    lng: c
                }
            }
        };
        var d = this,
            e = a || d.searchBox.getPlace();
        d.activateLoader(), 0 != e.length && (d.place = a || e, d.htmlListInit(), d.markerInit(), d.addClosestDealers())
    },
    getPlacesByZip: function(a, b, c) {
        if (!d && b && c) var d = {
            geometry: {
                location: {
                    lat: b,
                    lng: c
                }
            }
        };
        var e = this;
        e.place = d, $.when(e.getZipcodeGeo(a)).then(function() {
            e.htmlListInit(), e.markerInit(), e.findDealersByZip(a)
        }, function(a) {})
    },
    getZipcodeGeo: function(a) {
        DIDealerGeoInstance.init(a), this.place = DIDealerGeoInstance.geoLocation
    },
    htmlListInit: function() {
        $(DIDealerMap.config.mapDealerListContainer).empty()
    },
    markerInit: function() {
        var a = this;
        a.clearMarkers(), a.bounds = new google.maps.LatLngBounds, a.place && a.place.geometry.location && (a.currentPlaceMarker = new Marker({
            map: a.map,
            position: a.place.geometry.location,
            icon: {
                path: MAP_PIN,
                fillColor: "#F44336",
                fillOpacity: 0,
                strokeColor: "",
                strokeWeight: 0
            },
            map_icon_label: DIDealerMap.config.svgMarkerLabel ? DIDealerMap.config.svgMarkerLabel : '<span class="map-icon map-icon-circle inner-circle"></span>',
            placeMarker: 1
        }), a.circle = new google.maps.Circle({
            map: a.map,
            radius: a.calculateRadius(),
            strokeColor: "#CCCCCC",
            strokeOpacity: .8,
            strokeWeight: 2,
            fillColor: "#DDDDDD",
            fillOpacity: .3
        }), a.circle.bindTo("center", a.currentPlaceMarker, "position"), a.markers.push(a.currentPlaceMarker), a.animateMarker(a.currentPlaceMarker))
    },
    calculateRadius: function() {
        return DIDealerMap.config.placesSearchDistance / 3963.1676 * 6378100
    },
    addClosestDealers: function() {
        var a = this,
            b = {
                action: "get_closest_dealers",
                place: JSON.stringify(a.place),
                latitude: a.place.geometry.location.lat ? a.place.geometry.location.lat : a.place.geometry.location.lat(),
                longitude: a.place.geometry.location.lng ? a.place.geometry.location.lng : a.place.geometry.location.lng(),
                distance: DIDealerMap.config.placesSearchDistance ? DIDealerMap.config.placesSearchDistance : 30,
                limit: DIDealerMap.config.placesSearchLimit ? DIDealerMap.config.placesSearchLimit : 3,
                dealerID: a.hasDirectDealerSearch() ? a.hasDirectDealerSearch() : 0
            };
        jQuery.ajax({
            type: "POST",
            url: di_dealer_places_map.ajaxurl,
            dataType: "json",
            data: b,
            success: function(b) {
                a.closestLocations = b.dealers, a.addDealerMarkers(a.closestLocations), a.retrieveDealerListHtml(a.closestLocations), b.dealers.length || $(DIDealerMap.config.mapDealerListContainer).append('<li class="no-dealers-found">No dealers found</li>'), a.deactivateLoader()
            }
        })
    },
    findDealersByZip: function(a, b) {
        var c = this,
            d = {
                action: "get_dealers_by_zip",
                zipcode: a,
                limit: b || 1
            };
        jQuery.ajax({
            type: "POST",
            url: di_dealer_places_map.ajaxurl,
            dataType: "json",
            data: d,
            success: function(a) {
                a.error || !a.dealers.length ? null != c.place ? c.getPlaces(c.place) : c.getCalculatedDealersByGeolocation() : (a.dealers.length && (c.closestLocations = a.dealers, c.addDealerMarkers(c.closestLocations), c.retrieveDealerListHtml(c.closestLocations)), a.dealers.length || $(DIDealerMap.config.mapDealerListContainer).append('<li class="no-dealers-found">No dealers found</li>')), c.deactivateLoader()
            }
        })
    },
    getCalculatedDealersByGeolocation: function(a, b) {
        var c = this;
        if (this.getCookie("diGeolocationCookie") && (geoCookie = JSON.parse(this.getCookie("diGeolocationCookie")), geoCookie.latitude && geoCookie.longitude)) {
            var d = {
                action: "get_dealers_by_zip_calculated",
                latitude: geoCookie.latitude,
                longitude: geoCookie.longitude,
                distance: DIDealerMap.config.placesSearchDistance ? DIDealerMap.config.placesSearchDistance : 30,
                limit: DIDealerMap.config.placesSearchLimit ? DIDealerMap.config.placesSearchLimit : 3
            };
            $.ajax({
                url: di_dealer_places_map.ajaxurl,
                type: "POST",
                dataType: "json",
                data: d,
                success: function(a) {
                    a.dealers && (c.closestLocations = a.dealers, c.addDealerMarkers(c.closestLocations), c.retrieveDealerListHtml(c.closestLocations))
                }
            })
        }
    },
    placesListen: function(a, b) {
        this.searchBox.addListener(a, b)
    },
    gmapDomListeners: function() {
        var a = this;
        a.gmapDomListen(window, "resize", function() {
            var b = a.map.getCenter();
            google.maps.event.trigger(a.map, "resize"), a.map.setCenter(b)
        })
    },
    gmapDomListen: function(a, b, c) {
        google.maps.event.addDomListener(a, b, c)
    },
    clearMarkers: function(a) {
        var b = this;
        b.circle && b.circle.setMap(null), b.map._dealerMarkers.length && b.map._dealerMarkers.forEach(function(a) {
            a.setMap(null)
        }), b.markers.length && b.markers.forEach(function(a) {
            a.setMap(null)
        }), b.markers = []
    },
    getGmapIcon: function(a) {
        return icon = {
            url: DIDealerMap.config.pinImage
        }, icon = $.extend(!0, icon, a), icon
    },
    getPlaceLocation: function(a) {
        return {
            lat: a.geometry.location.lat(),
            lng: a.geometry.location.lng()
        }
    },
    animateMarker: function(a) {
        a.setAnimation(google.maps.Animation.BOUNCE), setTimeout(function() {
            null !== a.getAnimation() && a.setAnimation(null)
        }, 3550)
    },
    addDealerMarkers: function(a) {
        var b = this;
        if (a && Object.keys(a).length) {
            if (null == DIDealerMap.infoWindowPartial) jQuery(window).on("di_dealermap_infowindowpartial_retrieved", function() {
                for (var c = 0; c < a.length; c++) a[c].clickContent = DIDealerMap.infoWindowPartial, DIDealerMap.insertLocationDataInfowindow(a[c]), null != b.infoWindow.map && b.currentPlaceLocation.post_id == a[c].post_id && b.infoWindow.setContent(a[c].clickContent)
            });
            else
                for (var c = 0; c < a.length; c++) a[c].clickContent = DIDealerMap.infoWindowPartial, DIDealerMap.insertLocationDataInfowindow(a[c]);
            jQuery.each(a, function(a, c) {
                c.pinId = c.location_index;
                var d = {
                    map: b.map,
                    title: c.title,
                    position: b.Dealer_retrieveLatLng(c)
                };
                if (!1 === DIDealerMap.config.useSvgMarker) {
                    d.icon = b.getGmapIcon({
                        url: DIDealerMap.config.pinImage
                    });
                    var e = new google.maps.Marker(d)
                } else {
                    d.icon = {
                        path: MAP_PIN,
                        fillColor: b.dealerIconColor,
                        fillOpacity: 1,
                        strokeColor: "",
                        strokeWeight: 0
                    }, d.map_icon_label = DIDealerMap.config.svgMarkerLabel ? DIDealerMap.config.svgMarkerLabel : c.location_index < 10 ? '<span class="marker-count offset">' + c.location_index + "</span>" : '<span class="marker-count">' + c.location_index + "</span>";
                    var e = new Marker(d)
                }
                b.markers.push(e), b.addMarkerClickEvent(e, c)
            }), jQuery.each(b.markers, function(a, c) {
                b.bounds.extend(c.position)
            }), DIDealerMap.config.enablePlacesFitBounds ? b.placesFitBounds(a, !0) : (b.map.setZoom(9), b.currentPlaceMarker || 1 != b.markers.length ? b.map.setCenter(b.currentPlaceMarker.getPosition()) : b.map.setCenter(b.markers[0].getPosition()))
        } else b.map.setZoom(8), b.map.setCenter(b.currentPlaceMarker.getPosition());
        $(window).trigger("did_place_markers_added")
    },
    placesFitBounds: function(a, b) {
        var c = this;
        c.map.fitBounds(c.bounds), b && a.length <= 1 && c.map.setZoom(9)
    },
    retrieveDealerListHtml: function(a) {
        var b = this;
        b.getDealerListHtml(a), b.$mapList.fadeIn()
    },
    setDealerListHtml: function(a) {
        this.$mapList.html(a.html), $(window).trigger("did_place_list_html_added")
    },
    getDealerListHtml: function(a) {
        var b, c = this,
            d = new Date,
            e = d.getDay();
        e = 0 === e ? 6 : e - 1, b = {
            action: "get_dealer_list_html",
            locations: a,
            userDay: e
        }, $.ajax({
            url: di_dealer_places_map.ajaxurl,
            type: "POST",
            dataType: "json",
            data: b,
            success: function(a) {
                c.setDealerListHtml(a)
            }
        })
    },
    addMarkerClickEvent: function(a, b) {
        var c = this;
        google.maps.event.addListener(a, "click", function(a) {
            return function() {
                !0 === DIDealerMap.useSvgMarker && c.resetMarkerColors(), c.currentPlaceLocation = b, c.currentPlaceMarker = a, c.infoWindow.setContent(b.clickContent), c.infoWindow.open(c.map, a), window.DIDealerMap.activeInfowindow = b.post_id, !0 === DIDealerMap.config.fillViewport ? c.map.panTo(a.getPosition()) : c.map.setCenter(a.getPosition()), !0 === DIDealerMap.useSvgMarker && c.setMarkerColor(c.currentPlaceMarker, "#03A9F4"), jQuery(window).trigger("dealers_infoWindow_open", [a, b, c.infoWindow])
            }
        }(a))
    },
    setMarkerColor: function(a, b) {
        a.setIcon({
            path: MAP_PIN,
            fillColor: b,
            fillOpacity: 1,
            strokeColor: "",
            strokeWeight: 0
        })
    },
    resetMarkerColors: function() {
        var a = this;
        a.markers.forEach(function(b, c) {
            b.placeMarker || a.setMarkerColor(b, a.dealerIconColor)
        })
    },
    Dealer_retrieveLatLng: function(a) {
        return {
            lat: parseFloat(a.location.lat),
            lng: parseFloat(a.location.lng)
        }
    },
    selectFirstOnEnter: function(a) {
        function b(b, d) {
            if ("keydown" == b) {
                var e = d;
                d = function(b) {
                    var c = $(".pac-item-selected").length > 0;
                    if (13 == b.which && !c) {
                        var d = $.Event("keydown", {
                            keyCode: 40,
                            which: 40
                        });
                        e.apply(a, [d])
                    }
                    e.apply(a, [b])
                }
            }
            c.apply(a, [b, d])
        }
        var c = a.addEventListener ? a.addEventListener : a.attachEvent;
        a.addEventListener ? a.addEventListener = b : a.attachEvent && (a.attachEvent = b)
    }
};
jQuery(document).on("di_dealermap_markers_set", function() {
    "undefined" != typeof DIDealerMap && jQuery(".places-input").length && DIDealerPlaces.init(".places-input")
});
var DIDealerGeoInstance = {
    _location: null,
    paramsObject: null,
    searchBox: null,
    geoLocation: null,
    init: function(a) {
        var b = this;
        b.parseInit(), b._location && b.geoInit()
    },
    parseInit: function() {
        var a = this;
        a.paramsObject = this.getSearchParameters(), !a.paramsObject || void 0 === a.paramsObject.location && void 0 === a.paramsObject.zipcode || (a._location = void 0 !== a.paramsObject.location ? a.paramsObject.location : a.paramsObject.zipcode)
    },
    getSearchParameters: function() {
        var a = this,
            b = window.location.search.substr(1);
        return null != b && "" != b ? a.convertToAssocArray(b) : {}
    },
    convertToAssocArray: function(a) {
        for (var b = {}, c = a.split("&"), d = 0; d < c.length; d++) {
            var e = c[d].split("=");
            b[e[0]] = e[1]
        }
        return b
    },
    geoInit: function(a) {
        var b = this,
            c = a || b._location;
        c = decodeURIComponent(c), $.when(b.getGeoLocation(c)).then(function(a) {
            var d = !(void 0 === a.results || !a.results.length) && a.results.shift();
            d && void 0 !== d.geometry && d.geometry.location && (b.geoLocation = d, b.geoLocation.searchString = c)
        }, function(a) {})
    },
    getGeoLocation: function(a) {
        if (void 0 !== DIDealerMap.config && DIDealerMap.config.strictZipSearch) var a = "zip " + a;
        return dfd = jQuery.Deferred(), $.ajax({
            url: "https://maps.googleapis.com/maps/api/geocode/json",
            type: "GET",
            dataType: "json",
            timeout: 1e3,
            async: !1,
            data: {
                address: a,
                key: di_dealer_places_map.gmapApiKey
            },
            success: function(a) {
                a ? dfd.resolve(a) : dfd.reject("Could not get geocode data")
            },
            error: function(a, b, c) {}
        }), dfd.promise()
    }
};
jQuery(document).ready(function(a) {
    ({
        init: function() {
            this.listeners()
        },
        listeners: function() {
            this.buttonListeners()
        },
        buttonListeners: function() {
            a(".dealerResultsList").on("click", ".hours-header", function() {
                var b = this;
                a(this).parent().find(".hours-row").slideToggle(400, function() {
                    var c = a(b).find(".hours-right i").attr("class");
                    a(this).parent().find(".hours-row").is(":visible") ? (newClass = c.replace(/-down/, "-up"), a(b).find(".hours-right i").attr("class", newClass)) : (newClass = c.replace(/-up/, "-down"), a(b).find(".hours-right i").attr("class", newClass))
                })
            })
        }
    }).init()
});